<template>
  <div class="search_city">
    <div class="search_city-wrap">
      <i class="search_city-icon_closed s-icon-closed s-icon" @click="SET_CITY({city: null})"></i>
      <div class="search_city-inputs">
        <input type="text" v-focus class="search_city-input" v-model="queryText">
        <i class="search_city-icon_close s-icon-close s-icon" @click="queryText=''"></i>
      </div>
      <ul class="search_city-lists">
        <li class="search_city-list ellipsis" @click="SET_CITY({city: list})" v-for="(list, key) in suitableAirports" :key="key">
            {{`${list.airport}(${list.iata}), ${list.cn}`}}
        </li>
      </ul>
    </div>
    <div class="mask"></div>
  </div>
</template>
<script>
import { searchAirPortCity } from '@/constants/ApiConstants';
import { mapMutations } from 'vuex';
import { SET_CITY } from '@/store/type';
export default {
  name: 'SearchCity',
  data () {
    return {
      queryText: '',
      lists: null
    };
  },
  computed: {
    suitableAirports () {
      return this.getSuitableAirports(this.queryText);
    }
  },
  directives: {
    focus: {
      inserted: (el, { value = true }) => {
        if (value) {
          el.focus();
        }
      }
    }
  },
  methods: {
    ...mapMutations([
      SET_CITY
    ]),
    getSuitableAirports (keywords) {
      if (keywords.length < 2) {
        return this.defaulCity;
      } else {
        let lists = [];
        const reg = new RegExp(keywords, 'ig');
        this.lists && this.lists.forEach(val => {
          if (val.iata === keywords.toUpperCase()) {
            lists.push(val);
          } else if (reg.test(val.airport + val.iata + val.city)) {
            lists.push(val);
          }
        });
        return lists;
      }
    },
    getAirports () {
      this.$http(searchAirPortCity)
        .then(res => {
          this.lists = res.data;
        });
    }
  },
  created () {
    this.getAirports();
  }
};
</script>
<style lang="scss" scoped>
.mask{
  top: $headerH;
}
.search_city{
  position: fixed;
  top: $headerH;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: 20;
  background-color: rgba($color: #000000, $alpha: .7);
}
.search_city-wrap{
  position: relative;
  width: 100%;
  height: 100%;
  padding-top: 0.3rem;
  border-radius: .16rem;
  background-color: #fff;
  margin-top: 1.37rem;
  z-index: 30;
}
.search_city-icon_closed{
  position: absolute;
  left: 50%;
  top: -0.7rem;
  transform: translateX(-50%);
}
.search_city-inputs{
  position: relative;
  width: 6.6rem;
  margin: 0 auto;
}
.search_city-input{
  width: 6.6rem;
  height: 0.68rem;
  padding: 0 0.2rem;
  font-weight: bold;
  font-size: 0.28rem;
  border-radius: 0.12rem;
  background-color: #eaeaea;
  &:active{
    border-color: $green;
  }
}
.search_city-icon_close{
  position: absolute;
  right: 0.3rem;
  top: 50%;
  transform: translateY(-50%);
}
.search_city-lists{
  padding: 0 0.3rem;
}
.search_city-list{
  width: 100%;
  height: 0.78rem;
  line-height: 0.78rem;
  color: $lighterBlack;
  padding-left: 0.2rem;
  border-bottom: 1px solid  #dcdcdc;
}

</style>
