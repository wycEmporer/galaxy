<template>
  <div class="send_otp">
    <h3 class="cancel_otp_title">Cancel Trip</h3>
    <p class="cancel_otp_des">Confirm code has been sent to {{contactPhone | keepSecrect}}</p>
    <p class="cancel_otp_des">Please enter the confirm code to continue.</p>
    <div class="cancel_otp_code_box">
      <template v-for="(item, index) in code" >
        <input class="cancel_otp_code_input" :key="index" type="number" maxlength="1" @keyup.delete="clearCode(index)"
        :class="{'code_error':error,'active':item.active}" v-model="item.code" />
      </template>
      <p class="error_text" :class="{show: error}">Please try again</p>
    </div>
    <div class="clear">
      <button class="cancel_otp_resend" :class="{disabled:disabled && restTime > 0}" :disabled="disabled" @click="startSendOTP">
        {{disabled && restTime > 0?`Resend ${restTime}s`:'Resend'}}
      </button>
    </div>
    <h4 class="cancel_warning_title">Warning</h4>
    <p class="cancel_warning_des">
      Your booking will be cancelled and the refundable amount is 0/per passenger. Our system will cancel your booking automatically regardless of the refundable amount. Are you sure to proceed?
    </p>
    <button class="cancel_confirm_btn" @click="confirmCancel">Yes,Cancel Trip</button>
    <button class="cancel_not_confirm_btn" @click="giveUpCancel">No,Keep My trip</button>
  </div>
</template>
<script>
import { Toast, Indicator } from 'mint-ui';
import { getRefundOTP, applyForRefundTogether } from '@/constants/ApiConstants';
export default {
  props: ['OTPdata', 'contactPhone', 'tripId'],
  data () {
    return {
      eleList: null,
      restTime: 0,
      error: false,
      disabled: true,
      code: [
        { code: '', active: true },
        { code: '', active: false },
        { code: '', active: false },
        { code: '', active: false }
      ]
    }
  },
  watch: {
    code: {
      handler: (val) => {
        if (val) {
          val.forEach((e, i) => {
            if (e.code.length > 1) {
              e.code = e.code.substr(0, 1);
            }
          })
          let eleList = document.getElementsByClassName('cancel_otp_code_input');
          if (val[0].code !== '' && val[1].code === '') {
            eleList[1].focus();
            val[1].active = true;
          } else if (val[1].code !== '' && val[2].code === '') {
            eleList[2].focus();
            val[2].active = true;
          } else {
            eleList[3].focus();
            val[3].active = true;
          }
        }
      },
      deep: true
    }
  },
  methods: {
    startSendOTP () {
      Indicator.open({
        text: 'Sending...',
        spinnerType: 'fading-circle'
      });
      let url = `${getRefundOTP}?tripId=${this.tripId}`
      this.$http(url).then(res => {
        Indicator.close();
        if (res.success && res.lastSendTime) {
          this.restTime = res.lastSendTime;
          this.disabled = true;
          var timer = setInterval(() => {
            this.restTime--;
            if (this.restTime <= 0) {
              this.restTime = 0;
              this.disabled = false;
              clearInterval(timer);
            }
          }, 1000);
        } else {
          Toast(res);
        }
      })
    },
    clearCode (index) {
      // console.log(index);
      if (index <= 1) {
        index = 1;
      }
      this.eleList[(index - 1)].focus();
    },
    confirmCancel () {
      let data = this.OTPdata;
      data['otp'] = `${this.code[0].code}${this.code[1].code}${this.code[2].code}${this.code[3].code}`;
      this.$http.post(applyForRefundTogether, data).then(res => {
        if (res.code === 200 && res.succ) {
          this.error = false;
          Toast('Cancel Successfully');
          this.$emit('cancelSuccess');
        } else {
          this.error = true;
          Toast(res.msg);
        }
      })
    },
    giveUpCancel () {
      this.$emit('giveUpCancel');
    }
  },
  filters: {
    keepSecrect (val) {
      let phone = val.split(' ');
      let head = phone[1].substr(0, 3);
      let tail = phone[1].substr(-3);
      return `${phone[0]} ${head}****${tail}`;
    }
  },
  created () {
    this.startSendOTP();
  },
  mounted () {
    this.eleList = document.getElementsByClassName('cancel_otp_code_input');
    this.eleList[0].focus();
  }
}
</script>
<style lang="scss" scoped>
.send_otp{
  margin-top:0.3rem;
}
.cancel_otp_title{
  font-size: 0.28rem;
  height:0.31rem;
  color:$lightBlack;
  line-height: 0.35rem;
  margin-bottom: 0.3rem;
  font-weight: bold;
}
.cancel_otp_des{
  font-size: 0.28rem;
  height:0.42rem;
  color:#333;
  line-height: 0.42rem;
}
// code
.cancel_otp_code_box{
  margin:0.6rem 0 0.4rem;
  text-align: center;
}
.cancel_otp_code_input{
  width:0.9rem;
  color:#111;
  font-size: 0.36rem;
  line-height: 0.35rem;
  text-align: center;
  // padding-bottom:;
  outline: none;
  border-bottom:0.02rem solid $lightBlack;
}
.code_error{
  border-color:#BD0000;
}
.error_text{
  width:3rem;
  height:0.21rem;
  margin:0.2rem auto 0;
  font-size:0.22rem;
  color:rgba(189,0,0,1);
  line-height:0.22rem;
  opacity: 0;
}
.show{
  opacity: 1;
}
.active{
  border-color:$green;
}
.cancel_otp_code_input:nth-of-type(-n+3){
  margin-right: 0.3rem;
}
.cancel_otp_resend{
  float: right;
  height:0.42rem;
  color:#111;
  font-size: 0.24rem;
  font-weight: bold;
  line-height: 0.42rem;
  cursor: pointer;
  background: transparent;
  margin-bottom: 0.6rem;
}
.disabled{
  color:$lighterBlack;
  font-weight: normal;
  letter-spacing: 0.5px;
}
// warning
.cancel_warning_title{
  font-size: 0.28rem;
  height:0.27rem;
  color:$lightBlack;
  line-height: 0.3rem;
  margin-bottom: 0.2rem;
  font-weight: bold;
}
.cancel_warning_des{
  font-size: 0.22rem;
  color:$lighterBlack;
  line-height: 0.33rem;
  margin-bottom: 0.6rem;
}
.cancel_confirm_btn{
  display: block;
  width:6.2rem;
  height:0.84rem;
  color:#fff;
  font-weight: bold;
  font-size: 0.36rem;
  line-height: 0.84rem;
  background: $yellow;
  margin:0 auto 0.3rem;
  border-radius:0.12rem;
}
.cancel_not_confirm_btn{
  display: block;
  width:2.07rem;
  color:#111;
  font-size: 0.24rem;
  margin:0 auto;
  background: transparent;
}
</style>
